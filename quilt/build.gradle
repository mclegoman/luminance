plugins {
    id 'com.github.johnrengelman.shadow'
}

repositories {
    maven { url 'https://maven.quiltmc.org/repository/release/' }
}

architectury {
    platformSetupLoomIde()
    loader('quilt')
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:$rootProject.quilt_loader"
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionQuilt')
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api}")
    include(modImplementation("org.quiltmc:quilt-config:${rootProject.quilt_config}"))
    include(modImplementation("org.quiltmc.quilt-config.serializers:toml:${rootProject.quilt_config}"))
    include(modImplementation("org.quiltmc.quilt-config.serializers:json5:${rootProject.quilt_config}"))
    include(modImplementation("com.electronwill.night-config:toml:${rootProject.toml}"))
    include(modImplementation("com.electronwill.night-config:core:${rootProject.toml}"))
}

processResources {
    inputs.property 'group', project.group
    inputs.property 'version', project.version

    filesMatching('quilt.mod.json') {
        expand group: project.group, version: project.version
    }
    from("$rootDir/src/main/resources")
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
