plugins {
	id 'dev.architectury.loom' version '1.9-SNAPSHOT' apply false
	id 'architectury-plugin' version '3.4-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
	id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
	minecraft = project.minecraft
}

allprojects {
	group = rootProject.maven_group
	version = ("${project.mod_version}+${project.mc_version.replace("/", "-")}") + (project.isDirty == "true" ? "+dirty." + System.currentTimeSeconds() : "")
}

subprojects {
	apply plugin: 'dev.architectury.loom'
	apply plugin: 'architectury-plugin'
	apply plugin: 'maven-publish'

	base {
		archivesName = "$rootProject.mod_name-$project.name"
	}

	repositories {
		maven { url = "https://jitpack.io" }
		maven { url = "https://maven.terraformersmc.com/releases/" }
		mavenCentral()
		mavenLocal()
		exclusiveContent {
			forRepository {
				maven {
					name = "Modrinth"
					url = "https://api.modrinth.com/maven"
				}
			}
			filter {
				includeGroup "maven.modrinth"
			}
		}
		flatDir {
			dirs("../libs")
			dirs("libs")
		}
		maven { url = "https://maven.quiltmc.org/repository/release/" }
	}

	loom {
		mods {
			"perspective" {
				sourceSet("main")
			}
		}
	}

	dependencies {
		minecraft "net.minecraft:minecraft:$rootProject.minecraft"
		mappings("net.fabricmc:yarn:${project.mappings}:v2")
		modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api}")
		include(modImplementation("org.quiltmc:quilt-config:${project.quilt_config}"))
		include(modImplementation("org.quiltmc.quilt-config.serializers:toml:${project.quilt_config}"))
		include(modImplementation("org.quiltmc.quilt-config.serializers:json5:${project.quilt_config}"))
		include(modImplementation("com.electronwill.night-config:toml:${project.toml}"))
		include(modImplementation("com.electronwill.night-config:core:${project.toml}"))

		// Compatibility
		modCompileOnly "maven.modrinth:sodium:${project.sodium}"
		modCompileOnly "maven.modrinth:iris:${project.iris}"
		modCompileOnly "com.terraformersmc:modmenu:${project.modmenu}"
		modCompileOnly fileTree(dir: 'libs', include: '*.jar')
	}

	java {
		withSourcesJar()

		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 21
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifactId = base.archivesName.get()
				from components.java
			}
		}

		repositories {
		}
	}
}

forgix {
	group = "${project.maven_group}.${project.mod_name}"
	mergedJarName = "${project.mod_name}-${project.version}+${project.minecraft}.jar"
	outputDir = "build/libs/merged"
//	neoforge {
//		projectName = "neoforge"
//		jarLocation = "build/libs/${project.archives_name}-neoforge-${project.version}.jar"
//		additionalRelocate "com.mclegoman.luminance", "neoforge.com.mclegoman.luminance"
//	}
	quilt {
		projectName = "quilt"
		jarLocation = "build/libs/${project.mod_name}-quilt-${project.version}.jar"
		additionalRelocate "com.mclegoman.luminance", "quilt.com.mclegoman.luminance"
	}
	fabric {
		projectName = "fabric"
		jarLocation = "build/libs/${project.mod_name}-fabric-${project.version}.jar"
		additionalRelocate "com.mclegoman.luminance", "fabric.com.mclegoman.luminance"
	}
}